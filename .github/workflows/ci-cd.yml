name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      - name: Install dependencies for Next.js
        run: |
          cd next-app
          npm install

      - name: Build Next.js
        run: |
          cd next-app
          npm run build

      # 1. 프론트엔드 배포 (Next.js 앱을 S3에 배포)
      - name: Deploy Next.js to S3
        run: |
          aws s3 sync next-app/out/ s3://my-next-app-bucket-e57x1l --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION_FRONT }}

      # 2. 백엔드 배포 (Nest.js 앱을 ECS Fargate에 배포)
      - name: Build and push Docker image to ECR
        run: |
          cd nest-api
          docker build -t nest-api .
          docker tag nest-api:latest 743316907132.dkr.ecr.us-east-1.amazonaws.com/nest-api:latest
          
          # Login to AWS ECR
          aws ecr get-login-password --region ${{ secrets.AWS_REGION_BACK }} \
            | docker login --username AWS --password-stdin 743316907132.dkr.ecr.us-east-1.amazonaws.com
          
          # Push the image to ECR
          docker push 743316907132.dkr.ecr.us-east-1.amazonaws.com/nest-api:latest
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION_BACK }}

      - name: Create or Update ECS Fargate Service
        run: |
          ##############################
          # 1) 클러스터 생성 or 확인  #
          ##############################
          CLUSTER_NAME="infrapj-ecs-cluster-v2"
          echo "Checking if cluster $CLUSTER_NAME exists..."

          CLUSTER_STATUS=$(aws ecs describe-clusters \
            --clusters "$CLUSTER_NAME" \
            --region ${{ secrets.AWS_REGION_BACK }} \
            --query "clusters[0].status" --output text 2>/dev/null || echo "NOT_FOUND")

          echo "Current cluster status: $CLUSTER_STATUS"

          if [ "$CLUSTER_STATUS" = "NOT_FOUND" ] || [ "$CLUSTER_STATUS" = "MISSING" ] || [ "$CLUSTER_STATUS" = "INACTIVE" ]; then
            echo "Cluster does not exist or is INACTIVE. Creating new cluster..."
            aws ecs create-cluster --cluster-name "$CLUSTER_NAME" \
              --region ${{ secrets.AWS_REGION_BACK }}
            echo "Cluster created."
            CLUSTER_STATUS="CREATING" 
          fi

          ##############################
          # 2) 클러스터 ACTIVE 폴링    #
          ##############################
          # 최대 10회, 5초 간격으로 폴링
          for i in {1..10}; do
            CURRENT=$(aws ecs describe-clusters \
              --clusters "$CLUSTER_NAME" \
              --region ${{ secrets.AWS_REGION_BACK }} \
              --query "clusters[0].status" --output text 2>/dev/null || echo "NOT_FOUND")
            
            echo "Cluster status now: $CURRENT"
            if [ "$CURRENT" = "ACTIVE" ]; then
              echo "Cluster is ACTIVE now."
              break
            fi
            if [ "$CURRENT" = "NOT_FOUND" ] || [ "$CURRENT" = "MISSING" ] || [ "$CURRENT" = "INACTIVE" ]; then
              echo "Still not ACTIVE. Wait 5s..."
              sleep 5
            fi
          done

          # 한번 더 describe 해서 최종 상태 체크
          FINAL_STATUS=$(aws ecs describe-clusters \
            --clusters "$CLUSTER_NAME" \
            --region ${{ secrets.AWS_REGION_BACK }} \
            --query "clusters[0].status" --output text 2>/dev/null || echo "NOT_FOUND")

          if [ "$FINAL_STATUS" != "ACTIVE" ]; then
            echo "ERROR: Cluster is not ACTIVE after waiting. Final status: $FINAL_STATUS"
            exit 1
          fi

          ##############################
          # 3) 새 태스크 정의 등록    #
          ##############################
          echo "Registering new task definition..."
          TASK_DEF=$(aws ecs register-task-definition \
            --family nest-api-task \
            --execution-role-arn arn:aws:iam::743316907132:role/AmazonECSTaskExecutionRole \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu "256" \
            --memory "512" \
            --container-definitions "[{\"name\": \"nest-api\",\"image\": \"743316907132.dkr.ecr.us-east-1.amazonaws.com/nest-api:latest\",\"portMappings\": [{\"containerPort\": 8080,\"protocol\": \"tcp\"}],\"essential\": true,\"environment\": [{\"name\": \"PORT\",\"value\": \"8080\"}]}]" \
            --query "taskDefinition.taskDefinitionArn" \
            --output text \
            --region ${{ secrets.AWS_REGION_BACK }})

          echo "New task definition registered: $TASK_DEF"

          ##############################
          # 4) 서비스 생성/업데이트  #
          ##############################
          SERVICE_NAME="infrapj-backend-service"
          SUBNETS='["subnet-07e2ce40e219d5610","subnet-0b5168621201d75"]'
          SECURITY_GROUPS='["sg-0abc123def456"]'
          DESIRED_COUNT=1

          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_NAME" \
            --region ${{ secrets.AWS_REGION_BACK }} \
            --query "services[0].status" \
            --output text || echo "NOT_FOUND")
          
          echo "Service status: $SERVICE_STATUS"

          if [ "$SERVICE_STATUS" = "ACTIVE" ]; then
            echo "Service exists. Updating service..."
            aws ecs update-service \
              --cluster "$CLUSTER_NAME" \
              --service "$SERVICE_NAME" \
              --task-definition "$TASK_DEF" \
              --force-new-deployment \
              --region ${{ secrets.AWS_REGION_BACK }}
          else
            echo "Service not found or INACTIVE. Creating new service..."
            aws ecs create-service \
              --cluster "$CLUSTER_NAME" \
              --service-name "$SERVICE_NAME" \
              --task-definition "$TASK_DEF" \
              --desired-count $DESIRED_COUNT \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=$SUBNETS,securityGroups=$SECURITY_GROUPS,assignPublicIp=\"DISABLED\"}" \
              --region ${{ secrets.AWS_REGION_BACK }}
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION_BACK }}
